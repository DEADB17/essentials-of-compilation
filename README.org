# -*- org-confirm-babel-evaluate: nil; -*-
:SETTINGS:
#+STARTUP: overview
#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+OPTIONS: html-style:nil html-scripts:nil
#+OPTIONS: html5-fancy:t
#+HTML_CONTAINER: section
#+HTML_DOCTYPE: html5
#+HTML_HEAD: <link rel="stylesheet" href="org.css">
#+EXPORT_FILE_NAME: docs/index
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 26.2 (Org mode 9.2.4)
#+title: Essentials of compilation: An Incremental Approach
#+date: <2019-07-27 Sat>
#+author: DEADB17
#+email: DEADB17@gmail.com
:END:

#+BEGIN_ABSTRACT
[[https://deadb17.github.io/essentials-of-compilation/][Personal notes]] from reading [[https://www.rose-hulman.edu/class/cs/csse404/schedule/Essentials_of_Compilation.pdf][Essentials of Compilation]].
- From the CSSE 404: Compiler Construction Rose-Hulman Institute of Technology
  [[https://www.rose-hulman.edu/class/cs/csse404/][Computer Science and Software Engineering Department]].
- [[https://github.com/IUCompilerCourse/Essentials-of-Compilation][Source and additional material]].
- See also Abdulaziz Ghuloum's [[http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf][An Incremental Approach to Compiler Construction]].
#+END_ABSTRACT

#+TOC: headlines 3

* 1.5 Interpreter
The interpreter from the book is changed so that ~(read)~ takes an argument
specifying what the result of reading would be. This is done so that tests can
be batched instead of needing user intervention.

#+name: fig-1.2-interpreter
#+caption: Interpreter for the R0 language.
#+begin_src racket
  (require racket/fixnum)

  (define (interp-exp e)
    (match e
      [(? fixnum?) e]
      [`(read ,r)
       (cond [(fixnum? r) r]
             [else (error 'interp-R0 "input not an integer" r)])]
      [`(- ,e1) (fx- 0 (interp-exp e1))]
      [`(+ ,e1 ,e2) (fx+ (interp-exp e1) (interp-exp e2))]))

  (define (interp-R0 p)
    (match p
      [`(program ,e) (interp-exp e)]))
#+end_src

#+name: fig-1.2-error
#+caption: Error ~fx+: result is not a fixnum~
#+begin_src racket
  (define large 999999999999999999)
  (interp-R0 `(program (+ (+ (+ ,large ,large) (+ ,large ,large))
                          (+ (+ ,large ,large) (+ ,large ,large)))))
#+end_src

#+name: fig-1.2-exercise
#+caption: Exercise
#+begin_src racket
  (interp-R0 '(program (+ (read 50) (- 8))))
#+end_src

#+name: fig-1.2-result
#+begin_src racket :lang racket :noweb yes :exports results
  <<fig-1.2-interpreter>>
  <<fig-1.2-exercise>>
#+end_src

Result
#+RESULTS: fig-1.2-result
: 42


* 1.6 Example compiler: A partial evaluator
#+name: fig-1.3-part-eval
#+CAPTION: A partial evaluator for R0 expressions.
#+begin_src racket
  (require racket/fixnum)

  (define (pe-neg r)
    (cond [(fixnum? r) (fx- 0 r)]
          [else `(- ,r)]))

  (define (pe-add r1 r2)
    (cond [(and (fixnum? r1) (fixnum? r2)) (fx+ r1 r2)]
          [else `(+ ,r1 ,r2)]))

  (define (pe-arith e)
    (match e
      [(? fixnum?) e]
      [`(read ,n) e]
      [`(- ,(app pe-arith r1))
       (pe-neg r1)]
      [`(+ ,(app pe-arith r1) ,(app pe-arith r2))
       (pe-add r1 r2)]))
#+end_src

#+name: fig-1.3-test-proc
#+caption: Test procedure
#+begin_src racket
  (define (test-pe p)
    (define e (pe-arith p))
    (define i (interp-R0 `(program ,p)))
    (define r (if (equal? i (interp-R0 `(program ,e))) "#t" "#f"))
    (list p e i r))
#+end_src

#+name: fig-1.3-test
#+caption: Tests
#+begin_src racket
  (test-pe '(+ 13 (- 9)))
  (test-pe '(+ 1 (+ 2 (+ 3 (+ 4 (+ 5 (- 5)))))))
  (test-pe '(+ (read 1) 2))
  (test-pe '(+ (read 1) (+ (+ 1 (+ 1 1)) (+ (read 2) (- 1)))))
#+end_src

#+name: fig-1.3-result
#+begin_src racket :lang racket :noweb yes :exports results
  <<fig-1.2-interpreter>>
  <<fig-1.3-part-eval>>
  <<fig-1.3-test-proc>>
  (list
    '("expression" "partial eval" "result " "eval eq?")
    null
  <<fig-1.3-test>>
  )
#+end_src

#+caption: Test results
#+RESULTS: fig-1.3-result
| expression                                        | partial eval                       | result | eval eq? |
|---------------------------------------------------+------------------------------------+--------+----------|
| (+ 13 (- 9))                                      | 4                                  |      4 | #t       |
| (+ 1 (+ 2 (+ 3 (+ 4 (+ 5 (- 5))))))               | 10                                 |     10 | #t       |
| (+ (read 1) 2)                                    | (+ (read 1) 2)                     |      3 | #t       |
| (+ (read 1) (+ (+ 1 (+ 1 1)) (+ (read 2) (- 1)))) | (+ (read 1) (+ 3 (+ (read 2) -1))) |      5 | #t       |
